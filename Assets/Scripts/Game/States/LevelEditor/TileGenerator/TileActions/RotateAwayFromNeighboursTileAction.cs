using System.Collections.Generic;
using UnityEngine;

public class RotateAwayFromNeighboursTileAction : TileAction {

    [SerializeField] private GenerateType generateType = GenerateType.All;

    public override void Do(Vector2 gridPosition) {
        List<Vector2> allDirectNeighbourPositions = TileGrid.GetNeighbourPositions(gridPosition, true, NeighbourType.Direct);

        List<Vector2> neighboursPositions = new List<Vector2>();

        switch (generateType) {
            case GenerateType.All:
                neighboursPositions = allDirectNeighbourPositions;
                break;
            case GenerateType.UserGenerated:
                List<Vector2> userGeneratedNeighbourPositions = allDirectNeighbourPositions.FindAll(x => TileGrid.GetTile(x).UserGenerated);
                neighboursPositions = userGeneratedNeighbourPositions;
                break;
            case GenerateType.AutoGenerated:
                List<Vector2> autoGeneratedNeighbourPositions = allDirectNeighbourPositions.FindAll(x => !TileGrid.GetTile(x).UserGenerated);
                neighboursPositions = autoGeneratedNeighbourPositions;
                break;
        }

        Vector2 directionToNeighbours = TileGrid.GetDirectionToGridPositions(gridPosition, neighboursPositions);

        Vector2 awayDirection = -directionToNeighbours;
        float awayAngle = Mathf.Atan2(awayDirection.y, awayDirection.x) * Mathf.Rad2Deg;
        float tileAngle = awayAngle - 45;

        if (directionToNeighbours.x != 0 && directionToNeighbours.y != 0) {
            TileGrid.GetTile(gridPosition).SetAngle(tileAngle);
        } else {
            TileGrid.GetTile(gridPosition).SetAngle(awayAngle);
        }
    }

    private void SetName() {
        string tileActionName = "Rotate away from neighbours tile action";
        if(name != tileActionName) {
            name = tileActionName;
        }
    }

    private void Reset() {
        SetName();
    }

    private void OnValidate() {
        SetName();
    }

}
